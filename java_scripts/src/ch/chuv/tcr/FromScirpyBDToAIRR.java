package ch.chuv.tcr;

import ch.irb.translation.Translator3ORF;
import ch.irb.utils.Consts;

import java.io.*;
import java.util.HashMap;
import java.util.HashSet;

/*
Copyright 2022 - Mathilde Foglierini Perez
This class will take in input the airr file produced by scirpy and it will add the 
full VDJ nucleotide and protein sequence for each clonotype using
the file generated by changeO pipeline (after converting BD output file into celltanger-like format).
 */
public class FromScirpyBDToAIRR {

     //TODO set here the right path
    private File folder = new File("/MYPATH/manuscript-tcell-fallet/analysis_out_BD/files");
    private File airrfile = new File("/MYPATH/manuscript-tcell-fallet/processed_files/BD_filtered_contig_igblast_db-pass_parse-select.tsv");
    private File scirpyAirrFile = new File(folder.getPath()+ Consts.fs+"airrfile_data.tsv");
    private HashMap<String,String> sequenceIdToProtSeq = new HashMap<>();
    private HashMap<String,String> sequenceIdToNucSeq = new HashMap<>();

    public static void main(String[] args) throws IOException {
        new FromScirpyBDToAIRR();
    }


    public FromScirpyBDToAIRR() throws IOException {
        HashSet<String> cellIds = new HashSet<>();
        //parse AIRR file (changeO)
        parseAIRRfile();
        //Write in a single file (used for search of Anti-spike TCR spe)
        BufferedWriter singleOut = new BufferedWriter(new FileWriter(new File(folder.getPath()+Consts.fs
                +scirpyAirrFile.getName().replace(".tsv","_cleaned.tsv"))));
        BufferedReader fileReader = new BufferedReader(new FileReader(scirpyAirrFile));
        String line="";
        int index=0;
        int seqIndex=1;
        HashMap<String,Integer>headerToIndex= new HashMap<>();
        while ((line= fileReader.readLine())!=null){
            String[] cells = line.split("\t");
            index++;
            if (index==1){
                int i=0;
                for (String cell:cells){
                    headerToIndex.put(cell,i);
                    i++;
                }
                singleOut.write(line);
                singleOut.write("\tsequence_aa"+Consts.ls);
            }
            else{
                String isProductive= cells[3];
                if (isProductive.equals("F")){
                    continue;
                }
                String seqName="";
                if (cells[6].contains("TRA")){
                    seqName+="TRA";
                }else if (cells[6].contains("TRB")){
                    seqName+="TRB";
                }
                else if (cells[6].contains("TRD")){
                    seqName+="TRD";
                }
                else if (cells[6].contains("TRG")){
                    seqName+="TRG";
                }
                seqName+="_"+cells[headerToIndex.get("cell_id")];

                singleOut.write(seqName+"\t\tT");
                //System.out.println("Checking "+seqName);

                cellIds.add(cells[headerToIndex.get("cell_id")]);

                for (int i=3;i<cells.length;i++){
                    if (headerToIndex.get("sequence_alignment") ==i){
                        singleOut.write("\t"+sequenceIdToNucSeq.get(seqName));
                    }
                    else{
                        singleOut.write("\t"+cells[i]);
                    }
                }
                String seq= sequenceIdToProtSeq.get(seqName);
                //check we have the right sequence!
                if (!seq.contains(cells[headerToIndex.get("junction_aa")])){
                    System.out.println("GO OUT, problem with "+seqName+" and "+seq);
                    System.exit(-1);
                }
                singleOut.write("\t"+seq+Consts.ls);
                seqIndex++;
            }
        }
        fileReader.close();
        singleOut.close();

        seqIndex--;
        index--;
        System.out.println("Number of sequences parsed = "+index);
        System.out.println("Number of cleaned sequences written = "+seqIndex);
        System.out.println("number of cells with TCBR +/- TCRA: "+cellIds.size());
    }
    private void parseAIRRfile() throws IOException {
        HashSet<String> cellIds = new HashSet<>();
        BufferedReader fileReader = new BufferedReader(new FileReader(airrfile));
        String line="";
        int index=0;
        HashMap<String,Integer>headerToIndex= new HashMap<>();
        while ((line= fileReader.readLine())!=null) {
            String[] cells = line.split("\t");
            index++;
            if (index == 1) {
                int i=0;
                for (String cell:cells){
                    headerToIndex.put(cell,i);
                    i++;
                }
            }else{
                cellIds.add(cells[headerToIndex.get("cell_id")]);
                String seqId=cells[headerToIndex.get("j_call")].substring(0,3)+"_"+cells[headerToIndex.get("cell_id")];
                String seq = new Translator3ORF(cells[headerToIndex.get("sequence_alignment")]
                        .replaceAll("\\.", ""),
                        true, cells[headerToIndex.get("junction_aa")]).getProteinSequence();
                //System.out.println(seqId+" "+cells[headerToIndex.get("junction_aa")]);
                //System.out.println(seq);
                sequenceIdToProtSeq.put(seqId,seq);
                String dnaSeq= cells[headerToIndex.get("sequence_alignment")];
                sequenceIdToNucSeq.put(seqId,dnaSeq);
            }
        }
        fileReader.close();
        System.out.println("Number of cells parsed from the changeO file: "+cellIds.size());
    }
}
